
########################
Day 31 : 5th June 2025
########################



• Introduction to Terraform
• Terraform vs. Ansible
• Terraform Architecture
• Terraform Configuration
• Terraform Commands
• Managing Terraform Resources
• Terraform End to End Project 

- Infra-Structure Management using IAC :


	- IAC - Infra-Structure As Code :
	
	- Create and Configure Infra-Structure using Declarative Scripts 
	
	- Infra-Structure - Provisioning/Creation 
	
		- Tools : Terraform/CloudFormation/ARM 
	
	- Infra-Structure Configuration 

		- Tools : Ansible/Chef/Puppet
		
		
		VM - AWS Console - GUI -> Fully Manual approach.
		
		Create Infra-Structure As Code! - IAC 
		
		CICD Pipeline --> 
		
			SCM_Checkout --> Application Build --> Deploy to QA Server!
			
			100+ Test Servers!
			
			Server Template! 
			
			VM --> Create a new AMI using the existing VM --> Create VMs using the AMI
			
			
	
	Terraform Process Workflow :::
	
		- Identify the Scope 	--> AWS/GCP/Azure/ ?
		
		- Write Terraform Script based of Scope of Resources 		
		
				- Terraform Scripts are written using HCL --> Hashi-Corp Declarative Language
		
		- Perform Terraform Init 		==>  Initialize Terraform Provider
		
		- Perform Terraform Plan 		==>  Preview the script
		
		- Perform Terraform Apply		==>  Actually create the real Infra-Structure
		
		
			
	https://developer.hashicorp.com/terraform/tutorials/aws-get-started/install-cli		
	
	
	Installation of Terraform :::
	
	
	Working with Terraform :::
	
		- Install Terraform 		--> Local Windows Machine / Linux Machine 
		
				https://developer.hashicorp.com/terraform/tutorials/aws-get-started/install-cli
				
				https://developer.hashicorp.com/terraform/install
				

				Using Manual Approach - Install Terraform on local windows machine 
				
					- Download Windows AMD64 Version Terraform -- zipfile 
						- Right Click and Extract all 
							- Get the Extracted Terraform Folder 
								- Get the terraform - binary file 
								
					- Setup Environment Variable for terraform binary file 
						- from windows start menu, search for enviroment variable 
							- click of edit enviroment variable setting 
								- find system properties dialog 
									- select enviroment variables button
										- On Environment Variables Dialog 
											- goto to System Variable 
												- Select path variable and edit 
													- Click on New 
														- add C:\Softwares\terraform_1.7.2_windows_amd64
															- apply the changes and close the settings
				
		- Install Visual Studio Code 	- IDE used to create Terraform Projects 
			
				https://code.visualstudio.com/download
				
		- Goto Extension - 		Install HashiCorp Terraform extension for VSCode
				
		
		- Open Visual Studio Code - Create Terraform Project 
		
		- Goto Terminal Menu
		
			- Select new terminal
			
			- terraform --version
			
########################
Day 32 : 9th June 2025
########################

	Continue with Terraform :
	
	
		- Install Visual Studio Code 	- IDE used to create Terraform Projects 
			
				https://code.visualstudio.com/download
				
		- Goto Extension - 		Install HashiCorp Terraform extension for VSCode
				
		
		- Open Visual Studio Code - Create Terraform Project 
		
		- Goto Terminal Menu
		
			- Select new terminal
			
			- terraform --version
			
			
		- Identify the Scope 	--> AWS/GCP/Azure/ ?
		
		- Write Terraform Script based of Scope of Resources 		
		
				- Terraform Scripts are written using HCL --> Hashi-Corp Declarative Language
		
		- Perform Terraform Init 		==>  Initialize Terraform Provider
		
		- Perform Terraform Plan 		==>  Preview the script
		
		- Perform Terraform Apply		==>  Actually create the real Infra-Structure
		
		Create AWS Access_Key & Secret Key :::
		
			- Used to enable the user Authentication.

			
			
		Create/Add 			+
		
		Modify/Change		~

		Destroy/Delete 		-
		
		
		terraform init

		terraform plan

		terraform apply

		terraform destroy

		terraform state list

		terraform validate 

		terraform apply -auto-approve

		terraform destroy -auto-approve
		
		
cicd pipeline :


scm_checkout

application_build 

deploy to qa  


Scenario 1 :

	Pipeline1:
	
		SCM_Checkout --> Create New_Test_Server(Terraform) --> Configure New_Test_Server(Ansible)

	Pipeline2:
	
		SCM_Checkout --> Application_Build --> Deploy to New_Test_Server
		

Scenario 2 :

	Pipeline:
	
		SCM_Checkout --> Application_Build --> Create New_Test_Server(Terraform) --> Configure New_Test_Server(Ansible) --> Deploy to New_Test_Server
		
																																	|
																																	|
																																	|
																																	|
																																	
																															Automated Testing 
		
																																	|
																																	|
																																	|
																																	|
																																	
																															   Notify Users
																																	|
																																	|
																																	|
																																	|
																																	
																														Destroy New_Test_Server
																														
																														
