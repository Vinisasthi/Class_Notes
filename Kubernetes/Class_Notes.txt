	
########################
Day 24 : 21st May. 2025
########################		

	- Container Orchestration using Kubernetes
	
	Kubernetes ::::
	
		- It is a Open-Source Container Orchestration Tool 
		- Kubernetes is used to Deploy any type of Containers.
		- It is used to ensure high availability of the Applications/services running thru Containers.
		- Used to Ensure High Availability of Containers by creating Replicas of Containers.
		- It supports Auto-Scaling & Load Balancing.
		- Self-Healing
		
		
	Docker - Container Engine - used to create Container Images and Containers 
	
	Kubernetes - Container Orchestration Tool - Used to deploy the Containerized Micro-Service Based Application Services
	
	Managed Services :
	
		AWS 	: ECS/ECR/EKS 
		
		Azure 	: ACS/ACR/AKS
		
		GCP 	: GCE/GCR/GKE
		
	Open-Source Kubernetes :::
	
	
	- Architecture of Kubernetes 
	
	- Kubernetes Architecture Components
	
	- Kubernetes Terminologies & Concepts 
	
		- Pods 
		
		- Kubernetes Controller Objects 
			- Replicasets
			- Deployment Controller Object 
		
		- Kubernetes Services 
			- NodePort
			- ClusterIP
			- Load Balancer
		
		- Kubernetes Volumes - HostPath

		- Namespaces
	

- Kubernetes Architecture & Components ::::


	
		
		Kubernetes Architecture :::
		
			- Client/Server Architecture
			
			
		Kubernetes_Master					# Used to Create and Schedule the Deployments to Kubernetes_WorkNodes
		
			Kubernetes_WorkNode1			# Target Servers 
			Kubernetes_WorkNode2
			Kubernetes_WorkNode3
			Kubernetes_WorkNode4
			Kubernetes_WorkNode5
			
			
		Kubernetes Architecture
			Kubernetes_Master					# Used to Create and Schedule the Deployments to Kubernetes_WorkNodes
			
				Kubernetes_WorkNode1			# Target Servers 
				Kubernetes_WorkNode2
				Kubernetes_WorkNode3
		
- Kubernetes Architecture Components ::::

			API_Server 				--> # Acts as an interface to the kubernetes 
			
			ETCD 					--> # Single point of Source for Kubernetes Components 
			
			Scheduler				--> # To identify the Healthy Node for Deployments
			
			Controller Manager 		--> # To run the pods in its desired state 
			
			
			Kubelet 				--> # Is a Kubernetes Agent used to Create & Deploy the Pods
			
			KubeProxy				--> # Is used to enable pod networking by create Pod IP Address			
			
			CRI - Container RunTime Interface (Container-D)
									--> # It is used identify the Image from Container Registry for deployment
				
- Kubernetes Terminologies & Concepts 
	
		Kubernetes Concepts / Terminologies ::::
		
		
			Kubernetes_Master(VM)		# Used to Create and Schedule the Deployments to Kubernetes_WorkNodes
			
			Kubernetes_WorkNodes		# Target Servers 

			Kubectl 					# Is Command Line Utility, used to interact with Kubernetes Master 
			
			Container Images 
				--	Is a Static file that defined the properties of the Container and its dependencies 
				--  Container Images are Non-Executables
				--  Container Images are composed of various Layers created using the Dockerfile Instructions
				
			Containers 
				--	Containers are the executable units of Container Images
				-- 	Containers are used to run the applications defined in the Container Images 		
			
			Container Registry 
				--	It is used to save and version control the Container Images 
					Dockerhub is Container Registry to be used.
					https://hub.docker.com/			
			
			Container Repositories
				--	Container Repositories	are the subset of Container Registry
			
			
			Pod							# Is Atomic Unit of Schedule - Any Smalled Task you run in Kubernetes is executed as Pod.
										# Used to Run the Container(s)
										# As a best practise, it is recommended to have One Container in a Pod.
			
			Kubelet 					# Is a Kubernetes Agent used to Create & Deploy the Pods
			
			CRI 						# Container Run-Time Interface - "Container-D"
										# It is used identify the Image from Container Registry for deployment
			
		
			Manifest File				# Is a AppConfig file, that defines the properties of the pods to be deployed in kubernetes
										# It is written using *.yaml/*.json format by the developers and maintained in the Source Code Repositories during CICD Pipeline Automation Process 
		
		
			Cluster 					# Is collection of WorkerNodes 
			

		Kubernetes_Master :							#AWS/Azure/On-Prem
		
			Kubernetes_Master1 (VM)					#AWS 	

				Kubernetes Cluster1 				AWS-US_Region
					Kubernetes_WorkNode1 (VM)
					Kubernetes_WorkNode2 (VM)
					Kubernetes_WorkNode3 (VM)

				Kubernetes Cluster2 				AWS-Mum_Region
					Kubernetes_WorkNode1 (VM)
					Kubernetes_WorkNode2 (VM)
					Kubernetes_WorkNode3 (VM)

				Kubernetes Cluster3 				AWS-SNG_Region
					Kubernetes_WorkNode1 (VM)
					Kubernetes_WorkNode2 (VM)
					Kubernetes_WorkNode3 (VM)

			Kubernetes_Master2 (VM)					#Azure

				Kubernetes Cluster1 				Azure-US_Region
					Kubernetes_WorkNode1 (VM)
					Kubernetes_WorkNode2 (VM)
					Kubernetes_WorkNode3 (VM)

				Kubernetes Cluster2 				Azure-Mum_Region
					Kubernetes_WorkNode1 (VM)
					Kubernetes_WorkNode2 (VM)
					Kubernetes_WorkNode3 (VM)

				Kubernetes Cluster3 				Azure-SNG_Region
					Kubernetes_WorkNode1 (VM)
					Kubernetes_WorkNode2 (VM)
					Kubernetes_WorkNode3 (VM)


- Installation and Configuration of Kubernetes :::

	- Pre-requisites
	
	- https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/install-kubeadm/

	- kubeadm ==> Is Command Line Utility to setup and Configure Kubernetes




Next :

- Installation and Configuration of Kubernetes :::



########################
Day 24 : 22nd May. 2025
########################

- Installation and Configuration of Kubernetes :::




		Kubernetes Architecture:::
		
			Kubernetes_Master					# Used to Create and Schedule the Deployments to Kubernetes_WorkNodes
			
				Kubernetes_WorkNode1			# Target Servers 
				Kubernetes_WorkNode2



- Working with Kubernetes Pods	

	- kubectl 
	
	- Pods 
	
	- Manifest File -- *.yaml



########################
Day 25 : 26th May. 2025
########################

- Working with Kubernetes Pods	

	- Pods 
	
	- Kubernetes Controller Objects 
		- Replicasets
		- Deployment Controller Object 
	
	- Kubernetes Services 
		- NodePort
		- ClusterIP
		- Load Balancer
	
	- Kubernetes Volumes - HostPath

	- Namespaces
	
	
	Kubernetes Service :
	
		- NodePort Service : It is used to expose the pods to internet 
		
		- 30000 - 32767 : Port numbers will be assigned.
		
		13.203.219.229:31814
		
		
	- Kubernetes Controller Objects  :::
	
		- Replicasets
		- Deployment Controller Object 
	
	Controller Object :::
		ReplicaSet 
		Deployment 


	ReplicaSet :::
	
		--> Replicaset is used to execute the specific no. of pods in the cluster.
		--> Replicaset uses the Set Based Operator
		--> Used to replicate the pods and able to scale up/down
		--> The Replicasets will be automatically created, while creating Deployment Controller Object.
	
	Deployment Controller Object :::
	
		--> It is used to deploy the pods and ensure high availability of pods by creating pod replicas 
		--> 1. Create Muliple instance/replicas/copies of pods 
			2. Used to Scale-Up / Scale-Down the Pods 
			3. Used to Upgrade the application pods 
			4. Used to Down-grade/roll-back the application pods
		--> The upgrade/down-grade of application pods can be done without any downtime. 
		--> To achieve zero-downtime during upgrade/down-grade, By Default, it used Rolling-Update Deployment Strategy.


	- pod_1.0	- v1.0(Current Version) 		Upgrade to v2.0
	- pod_1.0	- v1.0	
	- pod_1.0	- v1.0

	- pod_1.0	- v1.0(Current Version) 	==> v2.0		==> pod_2.0
	- pod_1.0	- v1.0(Current Version) 	==> v2.0		==> pod_2.0
	- pod_1.0	- v1.0(Current Version) 	==> v2.0		==> pod_2.0
	
	
	
		- Deployment
		- Replicaset 
		- Pods 

	Developer created --> webappimg:v1.0 ==> Publish to container Registry	==> Deployed to kubernetes
	Developer created --> webappimg:v2.0 ==> Publish to container Registry	==> Deployed to kubernetes
