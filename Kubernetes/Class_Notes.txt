	
########################
Day 24 : 21st May. 2025
########################		

	- Container Orchestration using Kubernetes
	
	Kubernetes ::::
	
		- It is a Open-Source Container Orchestration Tool 
		- Kubernetes is used to Deploy any type of Containers.
		- It is used to ensure high availability of the Applications/services running thru Containers.
		- Used to Ensure High Availability of Containers by creating Replicas of Containers.
		- It supports Auto-Scaling & Load Balancing.
		- Self-Healing
		
		
	Docker - Container Engine - used to create Container Images and Containers 
	
	Kubernetes - Container Orchestration Tool - Used to deploy the Containerized Micro-Service Based Application Services
	
	Managed Services :
	
		AWS 	: ECS/ECR/EKS 
		
		Azure 	: ACS/ACR/AKS
		
		GCP 	: GCE/GCR/GKE
		
	Open-Source Kubernetes :::
	
	
	- Architecture of Kubernetes 
	
	- Kubernetes Architecture Components
	
	- Kubernetes Terminologies & Concepts 
	
		- Pods 
		
		- Kubernetes Controller Objects 
			- Replicasets
			- Deployment Controller Object 
		
		- Kubernetes Services 
			- NodePort
			- ClusterIP
			- Load Balancer
		
		- Kubernetes Volumes - HostPath

		- Namespaces
	

- Kubernetes Architecture & Components ::::


	
		
		Kubernetes Architecture :::
		
			- Client/Server Architecture
			
			
		Kubernetes_Master					# Used to Create and Schedule the Deployments to Kubernetes_WorkNodes
		
			Kubernetes_WorkNode1			# Target Servers 
			Kubernetes_WorkNode2
			Kubernetes_WorkNode3
			Kubernetes_WorkNode4
			Kubernetes_WorkNode5
			
			
		Kubernetes Architecture
			Kubernetes_Master					# Used to Create and Schedule the Deployments to Kubernetes_WorkNodes
			
				Kubernetes_WorkNode1			# Target Servers 
				Kubernetes_WorkNode2
				Kubernetes_WorkNode3
		
- Kubernetes Architecture Components ::::

			API_Server 				--> # Acts as an interface to the kubernetes 
			
			ETCD 					--> # Single point of Source for Kubernetes Components 
			
			Scheduler				--> # To identify the Healthy Node for Deployments
			
			Controller Manager 		--> # To run the pods in its desired state 
			
			
			Kubelet 				--> # Is a Kubernetes Agent used to Create & Deploy the Pods
			
			KubeProxy				--> # Is used to enable pod networking by create Pod IP Address			
			
			CRI - Container RunTime Interface (Container-D)
									--> # It is used identify the Image from Container Registry for deployment
				
- Kubernetes Terminologies & Concepts 
	
		Kubernetes Concepts / Terminologies ::::
		
		
			Kubernetes_Master(VM)		# Used to Create and Schedule the Deployments to Kubernetes_WorkNodes
			
			Kubernetes_WorkNodes		# Target Servers 

			Kubectl 					# Is Command Line Utility, used to interact with Kubernetes Master 
			
			Container Images 
				--	Is a Static file that defined the properties of the Container and its dependencies 
				--  Container Images are Non-Executables
				--  Container Images are composed of various Layers created using the Dockerfile Instructions
				
			Containers 
				--	Containers are the executable units of Container Images
				-- 	Containers are used to run the applications defined in the Container Images 		
			
			Container Registry 
				--	It is used to save and version control the Container Images 
					Dockerhub is Container Registry to be used.
					https://hub.docker.com/			
			
			Container Repositories
				--	Container Repositories	are the subset of Container Registry
			
			
			Pod							# Is Atomic Unit of Schedule - Any Smalled Task you run in Kubernetes is executed as Pod.
										# Used to Run the Container(s)
										# As a best practise, it is recommended to have One Container in a Pod.
			
			Kubelet 					# Is a Kubernetes Agent used to Create & Deploy the Pods
			
			CRI 						# Container Run-Time Interface - "Container-D"
										# It is used identify the Image from Container Registry for deployment
			
		
			Manifest File				# Is a AppConfig file, that defines the properties of the pods to be deployed in kubernetes
										# It is written using *.yaml/*.json format by the developers and maintained in the Source Code Repositories during CICD Pipeline Automation Process 
		
		
			Cluster 					# Is collection of WorkerNodes 
			

		Kubernetes_Master :							#AWS/Azure/On-Prem
		
			Kubernetes_Master1 (VM)					#AWS 	

				Kubernetes Cluster1 				AWS-US_Region
					Kubernetes_WorkNode1 (VM)
					Kubernetes_WorkNode2 (VM)
					Kubernetes_WorkNode3 (VM)

				Kubernetes Cluster2 				AWS-Mum_Region
					Kubernetes_WorkNode1 (VM)
					Kubernetes_WorkNode2 (VM)
					Kubernetes_WorkNode3 (VM)

				Kubernetes Cluster3 				AWS-SNG_Region
					Kubernetes_WorkNode1 (VM)
					Kubernetes_WorkNode2 (VM)
					Kubernetes_WorkNode3 (VM)

			Kubernetes_Master2 (VM)					#Azure

				Kubernetes Cluster1 				Azure-US_Region
					Kubernetes_WorkNode1 (VM)
					Kubernetes_WorkNode2 (VM)
					Kubernetes_WorkNode3 (VM)

				Kubernetes Cluster2 				Azure-Mum_Region
					Kubernetes_WorkNode1 (VM)
					Kubernetes_WorkNode2 (VM)
					Kubernetes_WorkNode3 (VM)

				Kubernetes Cluster3 				Azure-SNG_Region
					Kubernetes_WorkNode1 (VM)
					Kubernetes_WorkNode2 (VM)
					Kubernetes_WorkNode3 (VM)


- Installation and Configuration of Kubernetes :::

	- Pre-requisites
	
	- https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/install-kubeadm/

	- kubeadm ==> Is Command Line Utility to setup and Configure Kubernetes




Next :

- Installation and Configuration of Kubernetes :::



########################
Day 24 : 22nd May. 2025
########################

- Installation and Configuration of Kubernetes :::




		Kubernetes Architecture:::
		
			Kubernetes_Master					# Used to Create and Schedule the Deployments to Kubernetes_WorkNodes
			
				Kubernetes_WorkNode1			# Target Servers 
				Kubernetes_WorkNode2



- Working with Kubernetes Pods	

	- kubectl 
	
	- Pods 
	
	- Manifest File -- *.yaml



########################
Day 25 : 26th May. 2025
########################

- Working with Kubernetes Pods	

	- Pods 
	
	- Kubernetes Controller Objects 
		- Replicasets
		- Deployment Controller Object 
	
	- Kubernetes Services 
		- NodePort
		- ClusterIP
		- Load Balancer
	
	- Kubernetes Volumes - HostPath

	- Namespaces
	
	
	Kubernetes Service :
	
		- NodePort Service : It is used to expose the pods to internet 
		
		- 30000 - 32767 : Port numbers will be assigned.
		
		13.203.219.229:31814
		
		
	- Kubernetes Controller Objects  :::
	
		- Replicasets
		- Deployment Controller Object 
	
	Controller Object :::
		ReplicaSet 
		Deployment 


	ReplicaSet :::
	
		--> Replicaset is used to execute the specific no. of pods in the cluster.
		--> Replicaset uses the Set Based Operator
		--> Used to replicate the pods and able to scale up/down
		--> The Replicasets will be automatically created, while creating Deployment Controller Object.
	
	Deployment Controller Object :::
	
		--> It is used to deploy the pods and ensure high availability of pods by creating pod replicas 
		--> 1. Create Muliple instance/replicas/copies of pods 
			2. Used to Scale-Up / Scale-Down the Pods 
			3. Used to Upgrade the application pods 
			4. Used to Down-grade/roll-back the application pods
		--> The upgrade/down-grade of application pods can be done without any downtime. 
		--> To achieve zero-downtime during upgrade/down-grade, By Default, it used Rolling-Update Deployment Strategy.


	- pod_1.0	- v1.0(Current Version) 		Upgrade to v2.0
	- pod_1.0	- v1.0	
	- pod_1.0	- v1.0

	- pod_1.0	- v1.0(Current Version) 	==> v2.0		==> pod_2.0
	- pod_1.0	- v1.0(Current Version) 	==> v2.0		==> pod_2.0
	- pod_1.0	- v1.0(Current Version) 	==> v2.0		==> pod_2.0
	
	
	
		- Deployment
		- Replicaset 
		- Pods 

	Developer created --> webappimg:v1.0 ==> Publish to container Registry	==> Deployed to kubernetes
	Developer created --> webappimg:v2.0 ==> Publish to container Registry	==> Deployed to kubernetes


	
########################
Day 26 : 27th May. 2025
########################

	- Kubernetes Services 
		- NodePort
		- ClusterIP
		- Load Balancer
	
	- Kubernetes Volumes - HostPath

	- Namespaces
	
	- CICD Pipeline --> Jenkins/Maven/Git/Docker/Kubernetes - Tomorrow:
	
	
	Kubernetes Services :::
	
		Services are used to enable the communication to the pods :::
		
		
		- Cluster-IP Service:
			- It is used to enable the communication between the pods within the cluster 
		
		- Node-Port Service 
			- It is used to expose the pods to internet
			- Uses the port range : 30000 to 32767 
		
		- Load Balancer Service
		
			- Is an exteral service from service provider - aws LB, 

			- Is used to reduce the number of IPs address to be maintained for NodePort Service.
			
			- Load Balancer Service Created on top of the NodePort Service, will receives the request from end user thru internet and Route the request the corresponding nodeport service and access the pod within that.		
		
		
		3-tier application :
		
			- Front-End			==> Pod1 
			
			- Application-Layer ==> Pod2 
			
			- Data-Base Layer   ==> Pod3


		- Node-Port Service 
			- It is used to expose the pods to internet
			- Uses the port range : 30000 to 32767 
			



	- Kubernetes Volumes :::
	
		Persistant Volumes ::
		
			--> Is used to maintain the persistant data.
			
		Hostpath Volume :::
		
			- Same as Docker Volume.
			
			- Difference is hostpath volume is created at the pod level not at the container level.
			
			- Used to pass the input files to pods and restore the output from pods.
			
			
	
	- Kubernetes Namespace :::
	
		- Is the Logical Partition of Kubernetes Cluster		
		
		Environments:
		
			Dev 
			
			QA 
			
			UAT 
			
			
			
			Prod 
			
		kubectl create namespace dev 			# Create Namespace


Next ::

Integrate Docker & Kubernetes with Jenkins:

End-to-End CICD Pipeline 		: Project

Environment Readiness :::

Jenkins Pipeline :::

Stages :

scm_checkout
application_build 
Deploy to target server


Next Level : Stages using docker & kubernetes :

scm_checkout
application_build 
application_Image Build using docker file
Publish to container registry
Deploy to Kubernetes 




########################
Day 27 : 28th May. 2025
########################

	Objective :::
	
		Jenkins pipeline, perform application build, create container images,  Publish application image to Container registry and deploy to kubernetes cluster 
		
		
	Resources - Servers/Tools Needed :
	
	
		Servers :::
		
			Jenkins_Master													--> # To create CICD Pipeline Jobs and schedule it to run in Slave Nodes
			
				Build_Server-Jenkins_Slave 									--> # Compile the Source Code 
				(Perform Application Build and Docker Build)					# Perform Unit Testing 
																				# Create Artifacts 
																				# Create Application Image 
																				# Publish Application Image to DockerHub Registry
			
			Kubernetes_Master												--> Schedule Pod Deployments 
				Kubernetes_WorkNode1										--> Execute the Pods 
				Kubernetes_WorkNode2										--> Execute the Pods

			
		Tools ::::
	
			Jenkins_Master						--->	# jdk, jenkins, git 
            	Build_Server-Jenkins_Slave 		--->	# git, jdk, maven, docker
			Kubernetes_Master					---> 	# All Kubernetes Components
            	Kubernetes_WorkNode1
            	Kubernetes_WorkNode2

		Maintain DockerHub Credentials in the Jenkins Credential Manager 
			goto jenkins dashboard 
				-- Manage Jenkins 
					-- Credential 
						-- using dockerhub username and access token 	

		Publish/Push the Application Images to Container Registry. 
			
			Login to DockerHub using Docker CLI.
			
				- DockerHub LoginID 
				- DockerHub Access Token 
					- Create Access Token in DockerHub 
					
			#docker login -u loksaieta
						
			#Password: fsdfadasdfsdf
			
					
			#docker push loksaieta/sa-ai-buildimg:v1.0
			
		
		
		Integration of Kubernetes Master Node with Jenkins Master Node.
		
			- Using Publish over ssh plugins, integrate Kubernetes_Master Node to Jenkins Master Node
			- And Execute kubectl create command using Publish over ssh plugins
			
			--> 1. Create a devopsadmin - User in Kubernetes_Master
			--> 2. Create SSH Keys to devopsadmin - User
			--> 3. Ensure that devopsadmin - User have access to execute kubectl commands
			--> 4. Use, the Kubernetes - Master Node's - Private IP Address,User_Name and Credential to config in Jenkins - Publish Over SSH
			
			--> 5. Create a Pipeline Deployment Stage using Publish Over SSH Plugins step
					- To copy the kubernetes manifest file - *.yaml file from jenkins_Slave Node to Kubernetes Master Node.
					- To execute a command : kubectl apply -f kdeploy.yaml
						
#vi kdeploy.yaml

apiVersion: apps/v1
kind: Deployment
metadata:
  name: loksai-eta-deploy
  labels:
    app: loksai-eta-deploy-lbl
spec:
  replicas: 3
  selector:
    matchLabels:
      app: loksai-eta-app
  template:
    metadata:
      labels:
        app: loksai-eta-app
    spec:
      containers:
      - name: loksai-eta-container
        image: loksaieta/sa-ai-webapp
        ports:
        - containerPort: 8080
---
apiVersion: v1
kind: Service
metadata:
  name: loksai-eta-np-service
  labels:
    app: loksai-eta-app
spec:
  selector:
    app: loksai-eta-deploy-lbl

  type: NodePort
  ports:
  - nodePort: 31028
    port: 8080
    targetPort: 8080
	
	
	
pipeline {

    agent { label 'slave1' }

	environment {	
		DOCKERHUB_CREDENTIALS=credentials('dockerloginid')
	}
	
    stages {
        stage('SCM_Checkout') {
            steps {
                echo 'Perform SCM Checkout'
				git 'https://github.com/SA-DevOps-ai/java-webapp-project.git'
            }
        }
        stage('Application Build') {
            steps {
                echo 'Perform Application Build'
				sh 'mvn clean package'
				
            }
        }
        stage('Docker Build') {
            steps {
                echo 'Perform Docker Build'
				sh "docker build -t loksaieta/sa-ai-webapp:${BUILD_NUMBER} ."
				sh "docker tag loksaieta/sa-ai-webapp:${BUILD_NUMBER} loksaieta/sa-ai-webapp:latest"
				sh 'docker image list'
            }
        }
        stage('Login to Dockerhub') {
            steps {
                echo 'Login to DockerHub'				
				sh 'echo $DOCKERHUB_CREDENTIALS_PSW | docker login -u $DOCKERHUB_CREDENTIALS_USR --password-stdin'
                
            }
        }
        stage('Publish the Image to Dockerhub') {
            steps {
                echo 'Publish to DockerHub'
				sh "docker push loksaieta/sa-ai-webapp:latest"                
            }
        }
        stage('Deploy to Kubernetes Cluster') {
            steps {
				script {
				sshPublisher(publishers: [sshPublisherDesc(configName: 'Kubernetes_Master', transfers: [sshTransfer(cleanRemote: false, excludes: '', execCommand: 'kubectl apply -f kdeploy.yaml', execTimeout: 120000, flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, patternSeparator: '[, ]+', remoteDirectory: '.', remoteDirectorySDF: false, removePrefix: '', sourceFiles: '*.yaml')], usePromotionTimestamp: false, useWorkspaceInPromotion: false, verbose: false)])
			}				          
            }
        }
    }
}


# Open Web-browser and access webpage using 
http://<workernode_public_ipaddress>:<nodeport>
